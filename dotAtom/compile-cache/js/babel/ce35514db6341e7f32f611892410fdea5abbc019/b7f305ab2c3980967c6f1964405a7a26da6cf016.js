Object.defineProperty(exports, '__esModule', {
	value: true
});
exports.provideLinter = provideLinter;
exports.activate = activate;
exports.deactivate = deactivate;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/** @babel */

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _atom = require('atom');

var _loophole = require('loophole');

var _atomSetText = require('atom-set-text');

var _atomSetText2 = _interopRequireDefault(_atomSetText);

var _pkgDir = require('pkg-dir');

var _pkgDir2 = _interopRequireDefault(_pkgDir);

var _loadJsonFile = require('load-json-file');

var lintText = undefined;
(0, _loophole.allowUnsafeNewFunction)(function () {
	lintText = require('xo').lintText;
});

function lint(textEditor) {
	var filePath = textEditor.getPath();
	var dir = _pkgDir2['default'].sync(_path2['default'].dirname(filePath));

	// no package.json
	if (!dir) {
		return [];
	}

	// ugly hack to workaround ESLint's lack of a `cwd` option
	// TODO: remove this when https://github.com/sindresorhus/atom-linter-xo/issues/19 is resolved
	var defaultCwd = process.cwd();
	process.chdir(dir);

	var pkg = (0, _loadJsonFile.sync)(_path2['default'].join(dir, 'package.json'));

	// only lint when `xo` is a dependency
	if (!(pkg.dependencies && pkg.dependencies.xo) && !(pkg.devDependencies && pkg.devDependencies.xo)) {
		return [];
	}

	var report = undefined;
	(0, _loophole.allowUnsafeNewFunction)(function () {
		report = lintText(textEditor.getText(), {
			cwd: dir,
			filename: filePath
		});
	});

	process.chdir(defaultCwd);

	var textBuffer = textEditor.getBuffer();

	return report.results[0].messages.map(function (x) {
		var fix = undefined;

		if (x.fix) {
			fix = {
				range: new _atom.Range(textBuffer.positionForCharacterIndex(x.fix.range[0]), textBuffer.positionForCharacterIndex(x.fix.range[1])),
				newText: x.fix.text
			};
		}

		var ret = {
			filePath: filePath,
			fix: fix,
			type: x.severity === 2 ? 'Error' : 'Warning',
			text: x.message + ' (' + x.ruleId + ')'
		};

		// some messages don't have these
		if (typeof x.line === 'number' && typeof x.column === 'number') {
			ret.range = [[x.line - 1, x.column - 1], [x.line - 1, x.column - 1]];
		}

		return ret;
	});
}

function provideLinter() {
	return {
		name: 'XO',
		grammarScopes: ['source.js', 'source.jsx', 'source.js.jsx'],
		scope: 'file',
		lintOnFly: true,
		lint: lint
	};
}

function activate() {
	require('atom-package-deps').install('linter-xo');

	this.subscriptions = new _atom.CompositeDisposable();
	this.subscriptions.add(atom.commands.add('atom-text-editor', {
		'XO:Fix': function XOFix() {
			var editor = atom.workspace.getActiveTextEditor();

			if (!editor) {
				return;
			}

			var report = undefined;

			(0, _loophole.allowUnsafeNewFunction)(function () {
				report = lintText(editor.getText(), {
					fix: true,
					cwd: _path2['default'].dirname(editor.getPath())
				});
			});

			var output = report.results[0].output;

			if (output) {
				(0, _atomSetText2['default'])(output);
			}
		}
	}));
}

function deactivate() {
	this.subscriptions.dispose();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXdzb25ib3RzZm9yZC8uYXRvbS9wYWNrYWdlcy9saW50ZXIteG8vaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7b0JBQ2lCLE1BQU07Ozs7b0JBQ2tCLE1BQU07O3dCQUNWLFVBQVU7OzJCQUMzQixlQUFlOzs7O3NCQUNoQixTQUFTOzs7OzRCQUNHLGdCQUFnQjs7QUFFL0MsSUFBSSxRQUFRLFlBQUEsQ0FBQztBQUNiLHNDQUF1QixZQUFNO0FBQzVCLFNBQVEsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDO0NBQ2xDLENBQUMsQ0FBQzs7QUFFSCxTQUFTLElBQUksQ0FBQyxVQUFVLEVBQUU7QUFDekIsS0FBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3RDLEtBQU0sR0FBRyxHQUFHLG9CQUFPLElBQUksQ0FBQyxrQkFBSyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzs7O0FBR2hELEtBQUksQ0FBQyxHQUFHLEVBQUU7QUFDVCxTQUFPLEVBQUUsQ0FBQztFQUNWOzs7O0FBSUQsS0FBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2pDLFFBQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7O0FBRW5CLEtBQU0sR0FBRyxHQUFHLHdCQUFTLGtCQUFLLElBQUksQ0FBQyxHQUFHLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQzs7O0FBR3JELEtBQUksRUFBRSxHQUFHLENBQUMsWUFBWSxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFBLEFBQUMsSUFDN0MsRUFBRSxHQUFHLENBQUMsZUFBZSxJQUFJLEdBQUcsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFBLEFBQUMsRUFBRTtBQUNsRCxTQUFPLEVBQUUsQ0FBQztFQUNWOztBQUVELEtBQUksTUFBTSxZQUFBLENBQUM7QUFDWCx1Q0FBdUIsWUFBTTtBQUM1QixRQUFN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T0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQzs7QUFFeEMsT0FBSSxNQUFNLEVBQUU7QUFDWCxrQ0FBUSxNQUFNLENBQUMsQ0FBQztJQUNoQjtHQUNEO0VBQ0QsQ0FBQyxDQUFDLENBQUM7Q0FDSjs7QUFFTSxTQUFTLFVBQVUsR0FBRztBQUM1QixLQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxDQUFDO0NBQzdCIiwiZmlsZSI6Ii9Vc2Vycy9kYXdzb25ib3RzZm9yZC8uYXRvbS9wYWNrYWdlcy9saW50ZXIteG8vaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGJhYmVsICovXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7Q29tcG9zaXRlRGlzcG9zYWJsZSwgUmFuZ2V9IGZyb20gJ2F0b20nO1xuaW1wb3J0IHthbGxvd1Vuc2FmZU5ld0Z1bmN0aW9ufSBmcm9tICdsb29waG9sZSc7XG5pbXBvcnQgc2V0VGV4dCBmcm9tICdhdG9tLXNldC10ZXh0JztcbmltcG9ydCBwa2dEaXIgZnJvbSAncGtnLWRpcic7XG5pbXBvcnQge3N5bmMgYXMgbG9hZEpzb259IGZyb20gJ2xvYWQtanNvbi1maWxlJztcblxubGV0IGxpbnRUZXh0O1xuYWxsb3dVbnNhZmVOZXdGdW5jdGlvbigoKSA9PiB7XG5cdGxpbnRUZXh0ID0gcmVxdWlyZSgneG8nKS5saW50VGV4dDtcbn0pO1xuXG5mdW5jdGlvbiBsaW50KHRleHRFZGl0b3IpIHtcblx0Y29uc3QgZmlsZVBhdGggPSB0ZXh0RWRpdG9yLmdldFBhdGgoKTtcblx0Y29uc3QgZGlyID0gcGtnRGlyLnN5bmMocGF0aC5kaXJuYW1lKGZpbGVQYXRoKSk7XG5cblx0Ly8gbm8gcGFja2FnZS5qc29uXG5cdGlmICghZGlyKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cblx0Ly8gdWdseSBoYWNrIHRvIHdvcmthcm91bmQgRVNMaW50J3MgbGFjayBvZiBhIGBjd2RgIG9wdGlvblxuXHQvLyBUT0RPOiByZW1vdmUgdGhpcyB3aGVuIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvYXRvbS1saW50ZXIteG8vaXNzdWVzLzE5IGlzIHJlc29sdmVkXG5cdGNvbnN0IGRlZmF1bHRDd2QgPSBwcm9jZXNzLmN3ZCgpO1xuXHRwcm9jZXNzLmNoZGlyKGRpcik7XG5cblx0Y29uc3QgcGtnID0gbG9hZEpzb24ocGF0aC5qb2luKGRpciwgJ3BhY2thZ2UuanNvbicpKTtcblxuXHQvLyBvbmx5IGxpbnQgd2hlbiBgeG9gIGlzIGEgZGVwZW5kZW5jeVxuXHRpZiAoIShwa2cuZGVwZW5kZW5jaWVzICYmIHBrZy5kZXBlbmRlbmNpZXMueG8pICYmXG5cdFx0IShwa2cuZGV2RGVwZW5kZW5jaWVzICYmIHBrZy5kZXZEZXBlbmRlbmNpZXMueG8pKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cblx0bGV0IHJlcG9ydDtcblx0YWxsb3dVbnNhZmVOZXdGdW5jdGlvbigoKSA9PiB7XG5cdFx0cmVwb3J0ID0gbGludFRleHQodGV4dEVkaXRvci5nZXRUZXh0KCksIHtcblx0XHRcdGN3ZDogZGlyLFxuXHRcdFx0ZmlsZW5hbWU6IGZpbGVQYXRoXG5cdFx0fSk7XG5cdH0pO1xuXG5cdHByb2Nlc3MuY2hkaXIoZGVmYXVsdEN3ZCk7XG5cblx0Y29uc3QgdGV4dEJ1ZmZlciA9IHRleHRFZGl0b3IuZ2V0QnVmZmVyKCk7XG5cblx0cmV0dXJuIHJlcG9ydC5yZXN1bHRzWzBdLm1lc3NhZ2VzLm1hcCh4ID0+IHtcblx0XHRsZXQgZml4O1xuXG5cdFx0aWYgKHguZml4KSB7XG5cdFx0XHRmaXggPSB7XG5cdFx0XHRcdHJhbmdlOiBuZXcgUmFuZ2UoXG5cdFx0XHRcdFx0dGV4dEJ1ZmZlci5wb3NpdGlvbkZvckNoYXJhY3RlckluZGV4KHguZml4LnJhbmdlWzBdKSxcblx0XHRcdFx0XHR0ZXh0QnVmZmVyLnBvc2l0aW9uRm9yQ2hhcmFjdGVySW5kZXgoeC5maXgucmFuZ2VbMV0pXG5cdFx0XHRcdCksXG5cdFx0XHRcdG5ld1RleHQ6IHguZml4LnRleHRcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Y29uc3QgcmV0ID0ge1xuXHRcdFx0ZmlsZVBhdGgsXG5cdFx0XHRmaXgsXG5cdFx0XHR0eXBlOiB4LnNldmVyaXR5ID09PSAyID8gJ0Vycm9yJyA6ICdXYXJuaW5nJyxcblx0XHRcdHRleHQ6IGAke3gubWVzc2FnZX0gKCR7eC5ydWxlSWR9KWBcblx0XHR9O1xuXG5cdFx0Ly8gc29tZSBtZXNzYWdlcyBkb24ndCBoYXZlIHRoZXNlXG5cdFx0aWYgKHR5cGVvZiB4LmxpbmUgPT09ICdudW1iZXInICYmIHR5cGVvZiB4LmNvbHVtbiA9PT0gJ251bWJlcicpIHtcblx0XHRcdHJldC5yYW5nZSA9IFtcblx0XHRcdFx0W3gubGluZSAtIDEsIHguY29sdW1uIC0gMV0sXG5cdFx0XHRcdFt4LmxpbmUgLSAxLCB4LmNvbHVtbiAtIDFdXG5cdFx0XHRdO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZUxpbnRlcigpIHtcblx0cmV0dXJuIHtcblx0XHRuYW1lOiAnWE8nLFxuXHRcdGdyYW1tYXJTY29wZXM6IFtcblx0XHRcdCdzb3VyY2UuanMnLFxuXHRcdFx0J3NvdXJjZS5qc3gnLFxuXHRcdFx0J3NvdXJjZS5qcy5qc3gnXG5cdFx0XSxcblx0XHRzY29wZTogJ2ZpbGUnLFxuXHRcdGxpbnRPbkZseTogdHJ1ZSxcblx0XHRsaW50XG5cdH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcblx0cmVxdWlyZSgnYXRvbS1wYWNrYWdlLWRlcHMnKS5pbnN0YWxsKCdsaW50ZXIteG8nKTtcblxuXHR0aGlzLnN1YnNjcmlwdGlvbnMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xuXHR0aGlzLnN1YnNjcmlwdGlvbnMuYWRkKGF0b20uY29tbWFuZHMuYWRkKCdhdG9tLXRleHQtZWRpdG9yJywge1xuXHRcdCdYTzpGaXgnOiAoKSA9PiB7XG5cdFx0XHRjb25zdCBlZGl0b3IgPSBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVUZXh0RWRpdG9yKCk7XG5cblx0XHRcdGlmICghZWRpdG9yKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0bGV0IHJlcG9ydDtcblxuXHRcdFx0YWxsb3dVbnNhZmVOZXdGdW5jdGlvbigoKSA9PiB7XG5cdFx0XHRcdHJlcG9ydCA9IGxpbnRUZXh0KGVkaXRvci5nZXRUZXh0KCksIHtcblx0XHRcdFx0XHRmaXg6IHRydWUsXG5cdFx0XHRcdFx0Y3dkOiBwYXRoLmRpcm5hbWUoZWRpdG9yLmdldFBhdGgoKSlcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0Y29uc3Qgb3V0cHV0ID0gcmVwb3J0LnJlc3VsdHNbMF0ub3V0cHV0O1xuXG5cdFx0XHRpZiAob3V0cHV0KSB7XG5cdFx0XHRcdHNldFRleHQob3V0cHV0KTtcblx0XHRcdH1cblx0XHR9XG5cdH0pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYWN0aXZhdGUoKSB7XG5cdHRoaXMuc3Vic2NyaXB0aW9ucy5kaXNwb3NlKCk7XG59XG4iXX0=
//# sourceURL=/Users/dawsonbotsford/.atom/packages/linter-xo/index.js
