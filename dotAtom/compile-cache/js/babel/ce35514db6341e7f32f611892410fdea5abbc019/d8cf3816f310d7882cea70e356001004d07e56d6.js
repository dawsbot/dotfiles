Object.defineProperty(exports, '__esModule', {
	value: true
});
exports.provideLinter = provideLinter;
exports.activate = activate;
exports.deactivate = deactivate;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/** @babel */

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _atom = require('atom');

var _loophole = require('loophole');

var _atomSetText = require('atom-set-text');

var _atomSetText2 = _interopRequireDefault(_atomSetText);

var _pkgDir = require('pkg-dir');

var _pkgDir2 = _interopRequireDefault(_pkgDir);

var _loadJsonFile = require('load-json-file');

var _eslintRuleDocumentation = require('eslint-rule-documentation');

var _eslintRuleDocumentation2 = _interopRequireDefault(_eslintRuleDocumentation);

var lintText = undefined;
(0, _loophole.allowUnsafeNewFunction)(function () {
	lintText = require('xo').lintText;
});

function lint(textEditor) {
	var filePath = textEditor.getPath();
	var dir = _pkgDir2['default'].sync(_path2['default'].dirname(filePath));

	// no package.json
	if (!dir) {
		return [];
	}

	// ugly hack to workaround ESLint's lack of a `cwd` option
	// TODO: remove this when https://github.com/sindresorhus/atom-linter-xo/issues/19 is resolved
	var defaultCwd = process.cwd();
	process.chdir(dir);

	var pkg = (0, _loadJsonFile.sync)(_path2['default'].join(dir, 'package.json'));

	// only lint when `xo` is a dependency
	if (!(pkg.dependencies && pkg.dependencies.xo) && !(pkg.devDependencies && pkg.devDependencies.xo)) {
		return [];
	}

	var report = undefined;
	(0, _loophole.allowUnsafeNewFunction)(function () {
		report = lintText(textEditor.getText(), {
			cwd: dir,
			filename: filePath
		});
	});

	process.chdir(defaultCwd);

	var textBuffer = textEditor.getBuffer();

	return report.results[0].messages.map(function (x) {
		var fix = undefined;

		if (x.fix) {
			fix = {
				range: new _atom.Range(textBuffer.positionForCharacterIndex(x.fix.range[0]), textBuffer.positionForCharacterIndex(x.fix.range[1])),
				newText: x.fix.text
			};
		}

		var ret = {
			filePath: filePath,
			fix: fix,
			type: x.severity === 2 ? 'Error' : 'Warning',
			html: '<span>' + x.message + ' (<a href=' + (0, _eslintRuleDocumentation2['default'])(x.ruleId || '').url + '>' + x.ruleId + '</a>)</span>'
		};

		// some messages don't have these
		if (typeof x.line === 'number' && typeof x.column === 'number') {
			ret.range = [[x.line - 1, x.column - 1], [x.line - 1, x.column - 1]];
		}

		return ret;
	});
}

function provideLinter() {
	return {
		name: 'XO',
		grammarScopes: ['source.js', 'source.jsx', 'source.js.jsx'],
		scope: 'file',
		lintOnFly: true,
		lint: lint
	};
}

function activate() {
	require('atom-package-deps').install('linter-xo');

	this.subscriptions = new _atom.CompositeDisposable();
	this.subscriptions.add(atom.commands.add('atom-text-editor', {
		'XO:Fix': function XOFix() {
			var editor = atom.workspace.getActiveTextEditor();

			if (!editor) {
				return;
			}

			var report = undefined;

			(0, _loophole.allowUnsafeNewFunction)(function () {
				report = lintText(editor.getText(), {
					fix: true,
					cwd: _path2['default'].dirname(editor.getPath())
				});
			});

			var output = report.results[0].output;

			if (output) {
				(0, _atomSetText2['default'])(output);
			}
		}
	}));
}

function deactivate() {
	this.subscriptions.dispose();
}
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/dawsonbotsford/.atom/packages/linter-xo/index.js
