function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _libMain = require('../lib/main');

var _libMain2 = _interopRequireDefault(_libMain);

var _path = require('path');

var path = _interopRequireWildcard(_path);

'use babel';

var goodPath = path.join(__dirname, 'fixtures', 'files', 'good.js');
var badPath = path.join(__dirname, 'fixtures', 'files', 'bad.js');
var emptyPath = path.join(__dirname, 'fixtures', 'files', 'empty.js');
var fixPath = path.join(__dirname, 'fixtures', 'files', 'fix.js');
var importingpath = path.join(__dirname, 'fixtures', 'import-resolution', 'nested', 'importing.js');
var badImportPath = path.join(__dirname, 'fixtures', 'import-resolution', 'nested', 'badImport.js');
var ignoredPath = path.join(__dirname, 'fixtures', 'eslintignore', 'ignored.js');

describe('The eslint provider for Linter', function () {
  var _require = require('../lib/helpers');

  var spawnWorker = _require.spawnWorker;

  var worker = spawnWorker();
  var lint = _libMain2['default'].provideLinter.call(worker).lint;

  beforeEach(function () {
    atom.config.set('linter-eslint.disableFSCache', false);
    atom.config.set('linter-eslint.disableEslintIgnore', true);
    waitsForPromise(function () {
      return atom.packages.activatePackage('language-javascript').then(function () {
        return atom.workspace.open(goodPath);
      });
    });
  });

  describe('checks bad.js and', function () {
    var editor = null;
    beforeEach(function () {
      waitsForPromise(function () {
        return atom.workspace.open(badPath).then(function (openEditor) {
          editor = openEditor;
        });
      });
    });

    it('finds at least one message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages.length).toBeGreaterThan(0);
        });
      });
    });

    it('verifies that message', function () {
      waitsForPromise(function () {
        return lint(editor).then(function (messages) {
          expect(messages[0].type).toBeDefined();
          expect(messages[0].type).toEqual('Error');
          expect(messages[0].html).not.toBeDefined();
          expect(messages[0].text).toBeDefined();
          expect(messages[0].text).toEqual('\'foo\' is not defined.');
          expect(messages[0].filePath).toBeDefined();
          expect(messages[0].filePath).toMatch(/.+spec[\\\/]fixtures[\\\/]files[\\\/]bad\.js$/);
          expect(messages[0].range).toBeDefined();
          expect(messages[0].range.length).toEqual(2);
          expect(messages[0].range).toEqual([[0, 0], [0, 9]]);
          expect(messages[0].hasOwnProperty('fix')).toBeFalsy();
        });
      });
    });
  });

  it('finds nothing wrong with an empty file', function () {
    waitsForPromise(function () {
      return atom.workspace.open(emptyPath).then(function (editor) {
        return lint(editor).then(function (messages) {
          expect(messages.length).toEqual(0);
        });
      });
    });
  });

  it('finds nothing wrong with a valid file', function () {
    waitsForPromise(function () {
      return atom.workspace.open(goodPath).then(function (editor) {
        return lint(editor).then(function (messages) {
          expect(messages.length).toEqual(0);
        });
      });
    });
  });

  it('reports the fixes for fixable errors', function () {
    waitsForPromise(function () {
      return atom.workspace.open(fixPath).then(function (editor) {
        return lint(editor);
      }).then(function (messages) {
        expect(messages[0].fix.range).toEqual([[0, 11], [0, 12]]);
        expect(messages[0].fix.newText).toEqual('');

        expect(messages[1].fix.range).toEqual([[2, 1], [2, 1]]);
        expect(messages[1].fix.newText).toEqual(' ');
      });
    });
  });

  describe('when resolving import paths using eslint-plugin-import', function () {
    it('correctly resolves imports from parent', function () {
      waitsForPromise(function () {
        return atom.workspace.open(importingpath).then(function (editor) {
          return lint(editor).then(function (messages) {
            expect(messages.length).toEqual(0);
          });
        });
      });
    });
    it('shows a message for an invalid import', function () {
      waitsForPromise(function () {
        return atom.workspace.open(badImportPath).then(function (editor) {
          return lint(editor).then(function (messages) {
            expect(messages.length).toBeGreaterThan(0);
            expect(messages[0].type).toBe('Error');
            expect(messages[0].html).not.toBeDefined();
            expect(messages[0].text).toEqual('Unable to resolve path to module \'../nonexistent\'.');
            expect(messages[0].filePath).toBe(badImportPath);
            expect(messages[0].range).toEqual([[0, 24], [0, 40]]);
            expect(messages[0].hasOwnProperty('fix')).toBeFalsy();
          });
        });
      });
    });
  });

  describe('when a file is specified in an .eslintignore file', function () {
    beforeEach(function () {
      atom.config.set('linter-eslint.disableEslintIgnore', false);
    });
    it('will not give warnings for the file', function () {
      waitsForPromise(function () {
        return atom.workspace.open(ignoredPath).then(function (editor) {
          return lint(editor).then(function (messages) {
            expect(messages.length).toEqual(0);
          });
        });
      });
    });
  });

  describe('Fix errors when saved', function () {
    beforeEach(function () {
      atom.config.set('linter-eslint.fixOnSave', true);
    });
    it('should fix lint errors when saved', function () {
      waitsForPromise(function () {
        return atom.workspace.open(fixPath).then(function (editor) {
          lint(editor).then(function (messages) {
            expect(messages.length).toEqual(2);
            editor.save();
            lint(editor).then(function (messagesAfterSave) {
              expect(messagesAfterSave.length).toEqual(0);
            });
          });
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXdzb25ib3RzZm9yZC8uYXRvbS9wYWNrYWdlcy9saW50ZXItZXNsaW50L3NwZWMvbGludGVyLWVzbGludC1zcGVjLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7dUJBRW1CLGFBQWE7Ozs7b0JBQ1YsTUFBTTs7SUFBaEIsSUFBSTs7QUFIaEIsV0FBVyxDQUFBOztBQUtYLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUE7QUFDckUsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQTtBQUNuRSxJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFBO0FBQ3ZFLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUE7QUFDbkUsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUNuRCxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUE7QUFDaEQsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUNuRCxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUE7QUFDaEQsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUNqRCxjQUFjLEVBQUUsWUFBWSxDQUFDLENBQUE7O0FBRS9CLFFBQVEsQ0FBQyxnQ0FBZ0MsRUFBRSxZQUFNO2lCQUN2QixPQUFPLENBQUMsZ0JBQWdCLENBQUM7O01BQXpDLFdBQVcsWUFBWCxXQUFX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Q0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUE7YUFDNUMsQ0FBQyxDQUFBO1dBQ0gsQ0FBQyxDQUFBO1NBQ0gsQ0FBQztPQUFBLENBQ0gsQ0FBQTtLQUNGLENBQUMsQ0FBQTtHQUNILENBQUMsQ0FBQTtDQUNILENBQUMsQ0FBQSIsImZpbGUiOiIvVXNlcnMvZGF3c29uYm90c2ZvcmQvLmF0b20vcGFja2FnZXMvbGludGVyLWVzbGludC9zcGVjL2xpbnRlci1lc2xpbnQtc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnXG5cbmltcG9ydCBsaW50ZXIgZnJvbSAnLi4vbGliL21haW4nXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnXG5cbmNvbnN0IGdvb2RQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ2ZpeHR1cmVzJywgJ2ZpbGVzJywgJ2dvb2QuanMnKVxuY29uc3QgYmFkUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICdmaXh0dXJlcycsICdmaWxlcycsICdiYWQuanMnKVxuY29uc3QgZW1wdHlQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ2ZpeHR1cmVzJywgJ2ZpbGVzJywgJ2VtcHR5LmpzJylcbmNvbnN0IGZpeFBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnZml4dHVyZXMnLCAnZmlsZXMnLCAnZml4LmpzJylcbmNvbnN0IGltcG9ydGluZ3BhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnZml4dHVyZXMnLFxuICAnaW1wb3J0LXJlc29sdXRpb24nLCAnbmVzdGVkJywgJ2ltcG9ydGluZy5qcycpXG5jb25zdCBiYWRJbXBvcnRQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ2ZpeHR1cmVzJyxcbiAgJ2ltcG9ydC1yZXNvbHV0aW9uJywgJ25lc3RlZCcsICdiYWRJbXBvcnQuanMnKVxuY29uc3QgaWdub3JlZFBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnZml4dHVyZXMnLFxuICAnZXNsaW50aWdub3JlJywgJ2lnbm9yZWQuanMnKVxuXG5kZXNjcmliZSgnVGhlIGVzbGludCBwcm92aWRlciBmb3IgTGludGVyJywgKCkgPT4ge1xuICBjb25zdCB7IHNwYXduV29ya2VyIH0gPSByZXF1aXJlKCcuLi9saWIvaGVscGVycycpXG4gIGNvbnN0IHdvcmtlciA9IHNwYXduV29ya2VyKClcbiAgY29uc3QgbGludCA9IGxpbnRlci5wcm92aWRlTGludGVyLmNhbGwod29ya2VyKS5saW50XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgYXRvbS5jb25maWcuc2V0KCdsaW50ZXItZXNsaW50LmRpc2FibGVGU0NhY2hlJywgZmFsc2UpXG4gICAgYXRvbS5jb25maWcuc2V0KCdsaW50ZXItZXNsaW50LmRpc2FibGVFc2xpbnRJZ25vcmUnLCB0cnVlKVxuICAgIHdhaXRzRm9yUHJvbWlzZSgoKSA9PlxuICAgICAgYXRvbS5wYWNrYWdlcy5hY3RpdmF0ZVBhY2thZ2UoJ2xhbmd1YWdlLWphdmFzY3JpcHQnKS50aGVuKCgpID0+XG4gICAgICAgIGF0b20ud29ya3NwYWNlLm9wZW4oZ29vZFBhdGgpXG4gICAgICApXG4gICAgKVxuICB9KVxuXG4gIGRlc2NyaWJlKCdjaGVja3MgYmFkLmpzIGFuZCcsICgpID0+IHtcbiAgICBsZXQgZWRpdG9yID0gbnVsbFxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgd2FpdHNGb3JQcm9taXNlKCgpID0+XG4gICAgICAgIGF0b20ud29ya3NwYWNlLm9wZW4oYmFkUGF0aCkudGhlbihvcGVuRWRpdG9yID0+IHtcbiAgICAgICAgICBlZGl0b3IgPSBvcGVuRWRpdG9yXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgfSlcblxuICAgIGl0KCdmaW5kcyBhdCBsZWFzdCBvbmUgbWVzc2FnZScsICgpID0+IHtcbiAgICAgIHdhaXRzRm9yUHJvbWlzZSgoKSA9PlxuICAgICAgICBsaW50KGVkaXRvcikudGhlbihtZXNzYWdlcyA9PiB7XG4gICAgICAgICAgZXhwZWN0KG1lc3NhZ2VzLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgfSlcblxuICAgIGl0KCd2ZXJpZmllcyB0aGF0IG1lc3NhZ2UnLCAoKSA9PiB7XG4gICAgICB3YWl0c0ZvclByb21pc2UoKCkgPT5cbiAgICAgICAgbGludChlZGl0b3IpLnRoZW4obWVzc2FnZXMgPT4ge1xuICAgICAgICAgIGV4cGVjdChtZXNzYWdlc1swXS50eXBlKS50b0JlRGVmaW5lZCgpXG4gICAgICAgICAgZXhwZWN0KG1lc3NhZ2VzWzBdLnR5cGUpLnRvRXF1YWwoJ0Vycm9yJylcbiAgICAgICAgICBleHBlY3QobWVzc2FnZXNbMF0uaHRtbCkubm90LnRvQmVEZWZpbmVkKClcbiAgICAgICAgICBleHBlY3QobWVzc2FnZXNbMF0udGV4dCkudG9CZURlZmluZWQoKVxuICAgICAgICAgIGV4cGVjdChtZXNzYWdlc1swXS50ZXh0KS50b0VxdWFsKCdcXCdmb29cXCcgaXMgbm90IGRlZmluZWQuJylcbiAgICAgICAgICBleHBlY3QobWVzc2FnZXNbMF0uZmlsZVBhdGgpLnRvQmVEZWZpbmVkKClcbiAgICAgICAgICBleHBlY3QobWVzc2FnZXNbMF0uZmlsZVBhdGgpLnRvTWF0Y2goLy4rc3BlY1tcXFxcXFwvXWZpeHR1cmVzW1xcXFxcXC9dZmlsZXNbXFxcXFxcL11iYWRcXC5qcyQvKVxuICAgICAgICAgIGV4cGVjdChtZXNzYWdlc1swXS5yYW5nZSkudG9CZURlZmluZWQoKVxuICAgICAgICAgIGV4cGVjdChtZXNzYWdlc1swXS5yYW5nZS5sZW5ndGgpLnRvRXF1YWwoMilcbiAgICAgICAgICBleHBlY3QobWVzc2FnZXNbMF0ucmFuZ2UpLnRvRXF1YWwoW1swLCAwXSwgWzAsIDldXSlcbiAgICAgICAgICBleHBlY3QobWVzc2FnZXNbMF0uaGFzT3duUHJvcGVydHkoJ2ZpeCcpKS50b0JlRmFsc3koKVxuICAgICAgICB9KVxuICAgICAgKVxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ2ZpbmRzIG5vdGhpbmcgd3Jvbmcgd2l0aCBhbiBlbXB0eSBmaWxlJywgKCkgPT4ge1xuICAgIHdhaXRzRm9yUHJvbWlzZSgoKSA9PlxuICAgICAgYXRvbS53b3Jrc3BhY2Uub3BlbihlbXB0eVBhdGgpLnRoZW4oZWRpdG9yID0+XG4gICAgICAgIGxpbnQoZWRpdG9yKS50aGVuKG1lc3NhZ2VzID0+IHtcbiAgICAgICAgICBleHBlY3QobWVzc2FnZXMubGVuZ3RoKS50b0VxdWFsKDApXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgKVxuICB9KVxuXG4gIGl0KCdmaW5kcyBub3RoaW5nIHdyb25nIHdpdGggYSB2YWxpZCBmaWxlJywgKCkgPT4ge1xuICAgIHdhaXRzRm9yUHJvbWlzZSgoKSA9PlxuICAgICAgYXRvbS53b3Jrc3BhY2Uub3Blbihnb29kUGF0aCkudGhlbihlZGl0b3IgPT5cbiAgICAgICAgbGludChlZGl0b3IpLnRoZW4obWVzc2FnZXMgPT4ge1xuICAgICAgICAgIGV4cGVjdChtZXNzYWdlcy5sZW5ndGgpLnRvRXF1YWwoMClcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICApXG4gIH0pXG5cbiAgaXQoJ3JlcG9ydHMgdGhlIGZpeGVzIGZvciBmaXhhYmxlIGVycm9ycycsICgpID0+IHtcbiAgICB3YWl0c0ZvclByb21pc2UoKCkgPT5cbiAgICAgIGF0b20ud29ya3NwYWNlLm9wZW4oZml4UGF0aCkudGhlbihlZGl0b3IgPT5cbiAgICAgICAgbGludChlZGl0b3IpXG4gICAgICApLnRoZW4obWVzc2FnZXMgPT4ge1xuICAgICAgICBleHBlY3QobWVzc2FnZXNbMF0uZml4LnJhbmdlKS50b0VxdWFsKFtbMCwgMTFdLCBbMCwgMTJdXSlcbiAgICAgICAgZXhwZWN0KG1lc3NhZ2VzWzBdLmZpeC5uZXdUZXh0KS50b0VxdWFsKCcnKVxuXG4gICAgICAgIGV4cGVjdChtZXNzYWdlc1sxXS5maXgucmFuZ2UpLnRvRXF1YWwoW1syLCAxXSwgWzIsIDFdXSlcbiAgICAgICAgZXhwZWN0KG1lc3NhZ2VzWzFdLmZpeC5uZXdUZXh0KS50b0VxdWFsKCcgJylcbiAgICAgIH0pXG4gICAgKVxuICB9KVxuXG4gIGRlc2NyaWJlKCd3aGVuIHJlc29sdmluZyBpbXBvcnQgcGF0aHMgdXNpbmcgZXNsaW50LXBsdWdpbi1pbXBvcnQnLCAoKSA9PiB7XG4gICAgaXQoJ2NvcnJlY3RseSByZXNvbHZlcyBpbXBvcnRzIGZyb20gcGFyZW50JywgKCkgPT4ge1xuICAgICAgd2FpdHNGb3JQcm9taXNlKCgpID0+XG4gICAgICAgIGF0b20ud29ya3NwYWNlLm9wZW4oaW1wb3J0aW5ncGF0aCkudGhlbihlZGl0b3IgPT5cbiAgICAgICAgICBsaW50KGVkaXRvcikudGhlbihtZXNzYWdlcyA9PiB7XG4gICAgICAgICAgICBleHBlY3QobWVzc2FnZXMubGVuZ3RoKS50b0VxdWFsKDApXG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgKVxuICAgIH0pXG4gICAgaXQoJ3Nob3dzIGEgbWVzc2FnZSBmb3IgYW4gaW52YWxpZCBpbXBvcnQnLCAoKSA9PiB7XG4gICAgICB3YWl0c0ZvclByb21pc2UoKCkgPT5cbiAgICAgICAgYXRvbS53b3Jrc3BhY2Uub3BlbihiYWRJbXBvcnRQYXRoKS50aGVuKGVkaXRvciA9PlxuICAgICAgICAgIGxpbnQoZWRpdG9yKS50aGVuKG1lc3NhZ2VzID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChtZXNzYWdlcy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKVxuICAgICAgICAgICAgZXhwZWN0KG1lc3NhZ2VzWzBdLnR5cGUpLnRvQmUoJ0Vycm9yJylcbiAgICAgICAgICAgIGV4cGVjdChtZXNzYWdlc1swXS5odG1sKS5ub3QudG9CZURlZmluZWQoKVxuICAgICAgICAgICAgZXhwZWN0KG1lc3NhZ2VzWzBdLnRleHQpLnRvRXF1YWwoJ1VuYWJsZSB0byByZXNvbHZlIHBhdGggdG8gbW9kdWxlIFxcJy4uL25vbmV4aXN0ZW50XFwnLicpXG4gICAgICAgICAgICBleHBlY3QobWVzc2FnZXNbMF0uZmlsZVBhdGgpLnRvQmUoYmFkSW1wb3J0UGF0aClcbiAgICAgICAgICAgIGV4cGVjdChtZXNzYWdlc1swXS5yYW5nZSkudG9FcXVhbChbWzAsIDI0XSwgWzAsIDQwXV0pXG4gICAgICAgICAgICBleHBlY3QobWVzc2FnZXNbMF0uaGFzT3duUHJvcGVydHkoJ2ZpeCcpKS50b0JlRmFsc3koKVxuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgIClcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCd3aGVuIGEgZmlsZSBpcyBzcGVjaWZpZWQgaW4gYW4gLmVzbGludGlnbm9yZSBmaWxlJywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgYXRvbS5jb25maWcuc2V0KCdsaW50ZXItZXNsaW50LmRpc2FibGVFc2xpbnRJZ25vcmUnLCBmYWxzZSlcbiAgICB9KVxuICAgIGl0KCd3aWxsIG5vdCBnaXZlIHdhcm5pbmdzIGZvciB0aGUgZmlsZScsICgpID0+IHtcbiAgICAgIHdhaXRzRm9yUHJvbWlzZSgoKSA9PlxuICAgICAgICBhdG9tLndvcmtzcGFjZS5vcGVuKGlnbm9yZWRQYXRoKS50aGVuKGVkaXRvciA9PlxuICAgICAgICAgIGxpbnQoZWRpdG9yKS50aGVuKG1lc3NhZ2VzID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChtZXNzYWdlcy5sZW5ndGgpLnRvRXF1YWwoMClcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICApXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgnRml4IGVycm9ycyB3aGVuIHNhdmVkJywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgYXRvbS5jb25maWcuc2V0KCdsaW50ZXItZXNsaW50LmZpeE9uU2F2ZScsIHRydWUpXG4gICAgfSlcbiAgICBpdCgnc2hvdWxkIGZpeCBsaW50IGVycm9ycyB3aGVuIHNhdmVkJywgKCkgPT4ge1xuICAgICAgd2FpdHNGb3JQcm9taXNlKCgpID0+XG4gICAgICAgIGF0b20ud29ya3NwYWNlLm9wZW4oZml4UGF0aCkudGhlbihlZGl0b3IgPT4ge1xuICAgICAgICAgIGxpbnQoZWRpdG9yKS50aGVuKG1lc3NhZ2VzID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChtZXNzYWdlcy5sZW5ndGgpLnRvRXF1YWwoMilcbiAgICAgICAgICAgIGVkaXRvci5zYXZlKClcbiAgICAgICAgICAgIGxpbnQoZWRpdG9yKS50aGVuKG1lc3NhZ2VzQWZ0ZXJTYXZlID0+IHtcbiAgICAgICAgICAgICAgZXhwZWN0KG1lc3NhZ2VzQWZ0ZXJTYXZlLmxlbmd0aCkudG9FcXVhbCgwKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgKVxuICAgIH0pXG4gIH0pXG59KVxuIl19
//# sourceURL=/Users/dawsonbotsford/.atom/packages/linter-eslint/spec/linter-eslint-spec.js
