(function() {
  describe("Tag autocomplete tests", function() {
    var buffer, editor, languageMode, _ref;
    _ref = [], editor = _ref[0], buffer = _ref[1], languageMode = _ref[2];
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.packages.activatePackage("react");
      });
      waitsForPromise(function() {
        return atom.workspace.open("foofoo", {
          autoIndent: false
        }).then(function(o) {
          var grammar;
          editor = o;
          buffer = editor.buffer, languageMode = editor.languageMode;
          grammar = atom.grammars.grammarForScopeName("source.js.jsx");
          return editor.setGrammar(grammar);
        });
      });
      return afterEach(function() {
        atom.packages.deactivatePackages();
        return atom.packages.unloadPackages();
      });
    });
    return describe("tag handling", function() {
      it("should autocomplete tag", function() {
        editor.insertText('<p');
        editor.insertText('>');
        return expect(editor.getText()).toBe('<p></p>');
      });
      it("should not autocomplete tag attributes", function() {
        editor.insertText('<p attr={ 1');
        editor.insertText('>');
        return expect(editor.getText()).toBe('<p attr={ 1>');
      });
      it("should not autocomplete tag attributes with arrow functions", function() {
        editor.insertText('<p attr={number =');
        editor.insertText('>');
        return expect(editor.getText()).toBe('<p attr={number =>');
      });
      it("should not autocomplete tag attributes when insterted between", function() {
        editor.insertText('<p attr={ 1 }');
        editor.setCursorBufferPosition([0, 11]);
        editor.insertText('>');
        return expect(editor.getText()).toBe('<p attr={ 1> }');
      });
      it("should remove closing tag", function() {
        editor.insertText('<p');
        editor.insertText('>');
        expect(editor.getText()).toBe('<p></p>');
        editor.backspace();
        return expect(editor.getText()).toBe('<p');
      });
      return it("should add extra line break when new line added between open and close tag", function() {
        editor.insertText('<p></p>');
        editor.setCursorBufferPosition([0, 3]);
        editor.insertText('\n');
        expect(editor.buffer.getLines()[0]).toBe('<p>');
        expect(editor.buffer.getLines()[2]).toBe('</p>');
        editor.setText("");
        editor.insertText('<p\n  attr=""></p>');
        editor.setCursorBufferPosition([1, 10]);
        editor.insertText('\n');
        expect(editor.buffer.getLines()[0]).toBe('<p');
        expect(editor.buffer.getLines()[1]).toBe('  attr="">');
        return expect(editor.buffer.getLines()[3]).toBe('</p>');
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2Rhd3NvbmJvdHNmb3JkLy5hdG9tL3BhY2thZ2VzL3JlYWN0L3NwZWMvYXV0b2NvbXBsZXRlLXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxFQUFBLFFBQUEsQ0FBUyx3QkFBVCxFQUFtQyxTQUFBLEdBQUE7QUFDakMsUUFBQSxrQ0FBQTtBQUFBLElBQUEsT0FBaUMsRUFBakMsRUFBQyxnQkFBRCxFQUFTLGdCQUFULEVBQWlCLHNCQUFqQixDQUFBO0FBQUEsSUFFQSxVQUFBLENBQVcsU0FBQSxHQUFBO0FBQ1QsTUFBQSxlQUFBLENBQWdCLFNBQUEsR0FBQTtlQUNkLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZCxDQUE4QixPQUE5QixFQURjO01BQUEsQ0FBaEIsQ0FBQSxDQUFBO0FBQUEsTUFHQSxlQUFBLENBQWdCLFNBQUEsR0FBQTtlQUNaLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBZixDQUFvQixRQUFwQixFQUE4QjtBQUFBLFVBQUEsVUFBQSxFQUFZLEtBQVo7U0FBOUIsQ0FBZ0QsQ0FBQyxJQUFqRCxDQUFzRCxTQUFDLENBQUQsR0FBQTtBQUNwRCxjQUFBLE9BQUE7QUFBQSxVQUFBLE1BQUEsR0FBUyxDQUFULENBQUE7QUFBQSxVQUNDLGdCQUFBLE1BQUQsRUFBUyxzQkFBQSxZQURULENBQUE7QUFBQSxVQUVBLE9BQUEsR0FBVSxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFkLENBQWtDLGVBQWxDLENBRlYsQ0FBQTtpQkFHQSxNQUFNLENBQUMsVUFBUCxDQUFrQixPQUFsQixFQUpvRDtRQUFBLENBQXRELEVBRFk7TUFBQSxDQUFoQixDQUhBLENBQUE7YUFVQSxTQUFBLENBQVUsU0FBQSxHQUFBO0FBQ1IsUUFBQSxJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFkLENBQUEsQ0FBQSxDQUFBO2VBQ0EsSUFB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

//# sourceURL=/Users/dawsonbotsford/.atom/packages/react/spec/autocomplete-spec.coffee
