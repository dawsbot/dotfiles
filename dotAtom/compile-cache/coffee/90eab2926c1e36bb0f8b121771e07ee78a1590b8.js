(function() {
  var helpers;

  helpers = require('./spec-helper');

  describe("the input element", function() {
    var editor, editorElement, exState, getCommandEditor, getVisibility, vimState, _ref;
    _ref = [], editor = _ref[0], editorElement = _ref[1], vimState = _ref[2], exState = _ref[3];
    beforeEach(function() {
      var exMode, vimMode;
      vimMode = atom.packages.loadPackage('vim-mode');
      exMode = atom.packages.loadPackage('ex-mode');
      waitsForPromise(function() {
        var activationPromise;
        activationPromise = exMode.activate();
        helpers.activateExMode();
        return activationPromise;
      });
      runs(function() {
        return spyOn(exMode.mainModule.globalExState, 'setVim').andCallThrough();
      });
      waitsForPromise(function() {
        return vimMode.activate();
      });
      waitsFor(function() {
        return exMode.mainModule.globalExState.setVim.calls.length > 0;
      });
      return runs(function() {
        return helpers.getEditorElement(function(element) {
          atom.commands.dispatch(element, "ex-mode:open");
          editorElement = element;
          editor = editorElement.getModel();
          atom.commands.dispatch(getCommandEditor(), "core:cancel");
          vimState = vimMode.mainModule.getEditorState(editor);
          exState = exMode.mainModule.exStates.get(editor);
          vimState.activateNormalMode();
          vimState.resetNormalMode();
          return editor.setText("abc\ndef\nabc\ndef");
        });
      });
    });
    afterEach(function() {
      return atom.commands.dispatch(getCommandEditor(), "core:cancel");
    });
    getVisibility = function() {
      return editor.normalModeInputView.panel.visible;
    };
    getCommandEditor = function() {
      return editor.normalModeInputView.editorElement;
    };
    it("opens with 'ex-mode:open'", function() {
      atom.commands.dispatch(editorElement, "ex-mode:open");
      return expect(getVisibility()).toBe(true);
    });
    it("closes with 'core:cancel'", function() {
      atom.commands.dispatch(editorElement, "ex-mode:open");
      expect(getVisibility()).toBe(true);
      atom.commands.dispatch(getCommandEditor(), "core:cancel");
      return expect(getVisibility()).toBe(false);
    });
    it("closes when opening and then pressing backspace", function() {
      atom.commands.dispatch(editorElement, "ex-mode:open");
      expect(getVisibility()).toBe(true);
      atom.commands.dispatch(getCommandEditor(), "core:backspace");
      return expect(getVisibility()).toBe(false);
    });
    it("doesn't close when there is text and pressing backspace", function() {
      var commandEditor, model;
      atom.commands.dispatch(editorElement, "ex-mode:open");
      expect(getVisibility()).toBe(true);
      commandEditor = getCommandEditor();
      model = commandEditor.getModel();
      model.setText('abc');
      atom.commands.dispatch(commandEditor, "core:backspace");
      expect(getVisibility()).toBe(true);
      return expect(model.getText()).toBe('ab');
    });
    it("closes when there is text and pressing backspace multiple times", function() {
      var commandEditor, model;
      atom.commands.dispatch(editorElement, "ex-mode:open");
      expect(getVisibility()).toBe(true);
      commandEditor = getCommandEditor();
      model = commandEditor.getModel();
      expect(model.getText()).toBe('');
      model.setText('abc');
      atom.commands.dispatch(commandEditor, "core:backspace");
      expect(getVisibility()).toBe(true);
      expect(model.getText()).toBe('ab');
      atom.commands.dispatch(commandEditor, "core:backspace");
      expect(getVisibility()).toBe(true);
      expect(model.getText()).toBe('a');
      atom.commands.dispatch(commandEditor, "core:backspace");
      expect(getVisibility()).toBe(true);
      expect(model.getText()).toBe('');
      atom.commands.dispatch(commandEditor, "core:backspace");
      return expect(getVisibility()).toBe(false);
    });
    return it("contains '<,'> when opened while there are selections", function() {
      editor.setCursorBufferPosition([0, 0]);
      editor.selectToBufferPosition([0, 1]);
      editor.addCursorAtBufferPosition([2, 0]);
      editor.selectToBufferPosition([2, 1]);
      atom.commands.dispatch(editorElement, "ex-mode:open");
      return expect(getCommandEditor().getModel().getText()).toBe("'<,'>");
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2Rhd3NvbmJvdHNmb3JkLy5hdG9tL3BhY2thZ2VzL2V4LW1vZGUvc3BlYy9leC1pbnB1dC1zcGVjLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsTUFBQSxPQUFBOztBQUFBLEVBQUEsT0FBQSxHQUFVLE9BQUEsQ0FBUSxlQUFSLENBQVYsQ0FBQTs7QUFBQSxFQUNBLFFBQUEsQ0FBUyxtQkFBVCxFQUE4QixTQUFBLEdBQUE7QUFDNUIsUUFBQSwrRUFBQTtBQUFBLElBQUEsT0FBNkMsRUFBN0MsRUFBQyxnQkFBRCxFQUFTLHVCQUFULEVBQXdCLGtCQUF4QixFQUFrQyxpQkFBbEMsQ0FBQTtBQUFBLElBQ0EsVUFBQSxDQUFXLFNBQUEsR0FBQTtBQUNULFVBQUEsZUFBQTtBQUFBLE1BQUEsT0FBQSxHQUFVLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBZCxDQUEwQixVQUExQixDQUFWLENBQUE7QUFBQSxNQUNBLE1BQUEsR0FBUyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQWQsQ0FBMEIsU0FBMUIsQ0FEVCxDQUFBO0FBQUEsTUFFQSxlQUFBLENBQWdCLFNBQUEsR0FBQTtBQUNkLFlBQUEsaUJBQUE7QUFBQSxRQUFBLGlCQUFBLEdBQW9CLE1BQU0sQ0FBQyxRQUFQLENBQUEsQ0FBcEIsQ0FBQTtBQUFBLFFBQ0EsT0FBTyxDQUFDLGNBQVIsQ0FBQSxDQURBLENBQUE7ZUFFQSxrQkFIYztNQUFBLENBQWhCLENBRkEsQ0FBQTtBQUFBLE1BT0EsSUFBQSxDQUFLLFNBQUEsR0FBQTtlQUNILEtBQUEsQ0FBTSxNQUFNLENBQUMsVUFBVSxDQUFDLGFBQXhCLEVBQXVDLFFBQXZDLENBQWdELENBQUMsY0FBakQsQ0FBQSxFQURHO01BQUEsQ0FBTCxDQVBBLENBQUE7QUFBQSxNQVVBLGVBQUEsQ0FBZ0IsU0FBQSxHQUFBO2VBQ2QsT0FB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

//# sourceURL=/Users/dawsonbotsford/.atom/packages/ex-mode/spec/ex-input-spec.coffee
