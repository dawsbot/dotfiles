"""""""""""""""" Plug """"""""""""""""""""""""
call plug#begin('~/Dropbox/dotfiles/link/plugged')

" Load on startup
Plug 'vim-airline/vim-airline'
Plug 'mhartington/oceanic-next'
Plug 'editorconfig/editorconfig-vim'
Plug 'tomtom/tcomment_vim'
Plug 'scrooloose/syntastic'

" File searching
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Syntax-specific
Plug 'othree/yajs.vim' , { 'for': 'javascript' } " Syntax for js
" Plug 'mtscout6/syntastic-local-eslint.vim', { 'for': 'javascript' } " Local eslint
Plug 'sindresorhus/vim-xo', { 'for': 'javascript' } " Lint with xo

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

call plug#end()

" Airline
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

" set laststatus=2

let g:airline_theme='oceanicnext'
let g:airline_powerline_fonts = 1

" Nerdtree
let NERDTreeShowLineNumbers=1

" Syntastic
let g:syntastic_error_symbol='✘'
let g:syntastic_warning_symbol='⚠︎'
let g:syntastic_check_on_open = 1

" Javascript lint
let g:syntastic_javascript_checkers=['eslint', 'xo']

" Trim trailing whitespace
function! TrimTrailingWhitespace(txt)
  return substitute(a:txt, '^\n*\s*\(.\{-}\)\n*\s*$', '\1', '')
endfunction

" Source local xo executable
" let b:syntastic_javascript_xo_exec = TrimTrailingWhitespace(system('echo $(pwd)/node_modules/.bin/xo'))
let g:syntastic_javascript_eslint_exe = '$(npm bin)/eslint'
let b:syntastic_javascript_xo_exec = system('echo $(npm bin)/xo')

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_wq = 0 " No need to lint while \"wq\"'ing
let g:syntastic_aggregate_errors = 1 " Combine all output (eslint & flow)


" " let g:syntastic_javascript_eslint_generic = 1
" " let g:syntastic_javascript_eslint_exec = 'xo'
" let g:syntastic_javascript_eslint_args = '--compact'
"
"""""""""""""""" Plug End """""""""""""""""""


"""""""""""""""" Miscellaneous """""""""""""""
set encoding=utf8
set background=dark
filetype plugin on " Auto-detect un-labeled filetypes

syntax enable

" Pretty colors
if (has("termguicolors"))
 set termguicolors
endif
set guifont=Operator\ Mono:h14 " Custom font.

colorscheme OceanicNext

" Italicize comments
" https://alexpearce.me/2014/05/italics-in-iterm2-vim-tmux/
highlight Comment gui=italic

set number " Absolute line number in left gutter
set relativenumber " Relative line numbers except current line

set noswapfile " Don't let vim create swapfiles
set undofile " Persistent undos across file saves
set hlsearch " Highlight search matches while I type
set incsearch " Search as I type
set smartindent

set cursorline " Highlight line
set cursorcolumn " Highlight column
set scrolloff=10 " Scroll when 20 units from top/bottom

set expandtab " tabs are actually spaces
set tabstop=2 " tab two instead of four spaces

" Show matching brackets when text indicator is over them
set showmatch

set ignorecase " Ignore case when searching
set clipboard=unnamed " Use system-wide clipboard
set mouse=a " Mouse can scroll

match Error '\s\+$' " Highlight trailing spaces as errors

set list
set listchars=tab:-> " Show tabs as special character

autocmd FileType gitcommit :startinsert " Start git commits in edit mode

" Auto-reload vimrc in all active windows on change
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

""""""""""""""" Shortcuts """""""""""""
let mapleader = ' '

" Saving
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>1 :q!<CR>
nnoremap <leader>e :wq<CR>

nnoremap <leader>t :terminal<CR>

nnoremap <leader>n :NERDTree<CR>

" Swap between panes
nnoremap <silent> <leader>h :wincmd h<CR>
nnoremap <silent> <leader>l :wincmd l<CR>
nnoremap <leader><leader> :bnext<CR>

" Un-highlight search matches after a second \"Enter\" press
nnoremap <CR> :noh<CR><CR>
"
" yank to the end of line
nnoremap Y y$

" Autofix all eslint issues
nnoremap <leader>el :call ESLintFix()<CR>
nnoremap <leader>xo :call XOLintFix()<CR>

""""""""""""""""" Neovim Terminal """""""""""""""""""""""
tnoremap <Esc> <C-\><C-n> " Escape from insert mode in shell

" Disable ex mode
:map Q <Nop>

" ripgrep file search with \":F\"
" https://medium.com/@crashybang/supercharge-vim-with-fzf-and-ripgrep-d4661fc853d2
" --column: Show column number
" --line-number: Show line number
" --no-heading: Do not show file headings in results
" --fixed-strings: Search term as a literal string
" --ignore-case: Case insensitive search
" --no-ignore: Do not respect .gitignore, etc...
" --hidden: Search hidden files and folders
" --follow: Follow symlinks
" --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
" --color: Search color options
command! -bang -nargs=* F call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), 1, <bang>0)

" Auto-add shebang
augroup Shebang
  autocmd BufNewFile *.sh 0put =\"#!/bin/bash\<nl>\"|$
augroup END

function! ESLintFix()
 silent execute "!./node_modules/.bin/eslint --fix %"
 edit! %
endfunction

function! XOLintFix()
 silent execute "!./node_modules/.bin/xo --fix %"
 edit! %
endfunction

" """" fix broken crontab temp file """""
" au BufEnter /private/tmp/crontab.* setl backupcopy=yes
"
" """"""""""""""""""" Functions """""""""""""""""""""
" function! TrimWhiteSpace()
"   %s/\s\+$//e
"   :w
"   ''
" endfunction
"
" function! DoubleQuotesToSingle()
"   %s/"/'/g
"   :w
"   ''
" endfunction
"
"
" Set's vim's shell to source zshrc (so aliases are available in "!<command>"
" set shell=/bin/zsh\ --login
"
" NeoBundle 'qpkorr/vim-bufkill'
"
" NeoBundle 'tpope/vim-surround'
" " NeoBundle 'nathanaelkane/vim-indent-guides'
" " NeoBundle 'tmhedberg/matchit'
"
" set ai
" set si
"
" " Syntastic
" " set statusline+=%#warningmsg#
" " set statusline+=%{SyntasticStatuslineFlag()}
" " set statusline+=%*
" " set laststatus=2
"
" " let g:syntastic_javascript_eslint_generic = 1
" " let g:syntastic_javascript_eslint_exec = 'xo'
" " let g:syntastic_javascript_eslint_args = '--compact'
" " let g:syntastic_javascript_checkers = ['eslint', 'jshint']
"
" " let g:syntastic_javascript_checkers=['eslint']
" " let g:syntastic_python_checkers = []
" let g:syntastic_check_on_open=1
"
" " Close out NERDTree if it's the last things open
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
"
" """"""""""""""""""""""""" Custom
"
" "Tabbing and efficiency
" set smartindent
" set shiftwidth=2
" set backspace=indent,eol,start
"
" """"""""""""""""""" Leader overrides """"""""""""""""""""
" nnoremap <silent> <leader>s :call TrimWhiteSpace()<CR>
"
" "Delete buffer special. Defined in vim-bufkill
" nmap <leader>k :BD<CR>
"
" nmap <leader>p <F2><CR>ki
"
" " Navigating windows
" nnoremap <silent> <leader>j :wincmd j<CR>
"
" """""""""""""""""""" Custom commands """"""""""""""""""""
" " Paste in teammate names for code review
" nnoremap <leader>t a dkearns aleksey<ESC>
" "Engage spell checking
" command Spell execute "set spell spelllang=en_us"
"

