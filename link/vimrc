" TODO: copy line from `x` lines up or down and paste in current position

let mapleader = ' '

"""""""""""""""" Plug """"""""""""""""""""""""
call plug#begin('~/Dropbox/dotfiles/link/plugged')

" Load on startup
Plug 'vim-airline/vim-airline'
" Plug 'editorconfig/editorconfig-vim' " Load .editorconfig if exists
Plug 'tomtom/tcomment_vim' " `gcc` commenting
Plug 'neomake/neomake' " linting, build tasks
Plug 'kshenoy/vim-signature' " Display vim marks in left bar
Plug 'airblade/vim-gitgutter' " Displays git diff in left bar
Plug 'joshdick/onedark.vim'
" Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' } " autocomplete suggestions
Plug 'pbrisbin/vim-mkdir'
" File searching
" Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
" Plug 'junegunn/fzf.vim'

Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'

" Syntax-specific
Plug 'othree/yajs.vim' , { 'for': 'javascript' } " Syntax
Plug 'pangloss/vim-javascript', { 'for': 'javascript' } " more syntax
Plug 'othree/es.next.syntax.vim', { 'for': 'javascript' } " imports, etc.
Plug 'mxw/vim-jsx', { 'for': 'javascript' } " jsx support
" Plug 'sindresorhus/vim-xo', { 'for': 'javascript' } " Lint with xo

" Plug 'mattn/emmet-vim', { 'for': 'html' } " html tab completions
" Plug 'mattn/emmet-vim' " html tab completions
" Re-enable when neovim python runtime is figured out https://github.com/neovim/neovim/issues/1203
Plug 'valloric/MatchTagAlways', {'for': 'html'}
" Re-enable when working on a css project and care to figure out why this is not working
" Plug 'ap/vim-css-color', { 'for': 'css' } " css color highlighting

Plug 'scrooloose/nerdtree'

call plug#end()

" Airline
let g:airline#extensions#tabline#enabled = 1 " Enable topnav of buffers
let g:airline#extensions#tabline#fnamemod = ':t' " Only filename in top nav
let g:airline_theme='onedark' " match colorscheme
let g:airline_powerline_fonts = 1 " enable fancy fonts
let g:airline_section_b = '' " clear section on bottom-left which contains hunks & branch
let g:airline_section_z = '' " clear section on bottom-right which contains percentage, line number, & column number

" Nerdtree
let NERDTreeShowLineNumbers=1
let NERDTreeShowHidden=1
nnoremap <leader>n :NERDTree<CR>
" If no file is specified, open to nerdtree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTreeToggle | endif

" Emmet
" imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")

" vim-jsx
let g:jsx_ext_required = 0 " Allow JSX in normal JS files

" Neomake
let g:neomake_javascript_eslint_maker = {
      \ 'errorformat': '%E%f: line %l\, col %c\, Error - %m,' .
      \ '%W%f: line %l\, col %c\, Warning - %m',
      \ 'exe': "eslint",
      \ 'args': ['-f', 'compact'],
      \ }

let g:neomake_jsx_eslint_maker = {
      \ 'errorformat': '%E%f: line %l\, col %c\, Error - %m,' .
      \ '%W%f: line %l\, col %c\, Warning - %m',
      \ 'exe': "eslint",
      \ 'args': ['-f', 'compact'],
      \ }

let g:neomake_javascript_enabled_makers = ['eslint']
let g:neomake_jsx_enabled_makers = ['eslint']

autocmd! BufWritePost * Neomake

" Deoplete
let g:deoplete#enable_at_startup = 1
" tab completion of deoplete suggestions
inoremap <tab> <C-n>

" Syntastic
" Trim trailing whitespace
function! TrimTrailingWhitespace(txt)
  return substitute(a:txt, '^\n*\s*\(.\{-}\)\n*\s*$', '\1', '')
endfunction

" let g:syntastic_error_symbol='✘'
" let g:syntastic_warning_symbol='⚠︎'
" let g:syntastic_check_on_open = 1
"
" " Javascript lint
" let g:syntastic_javascript_checkers=['eslint', 'xo']
"
"
" " Source local xo executable
" let b:syntastic_javascript_xo_exec = TrimTrailingWhitespace(system('echo $(npm bin)/xo'))
" let g:syntastic_javascript_eslint_exe = '$(npm bin)/eslint'
" " let b:syntastic_javascript_xo_exec = system('echo $(npm bin)/xo')
"
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_wq = 0 " No need to lint while \"wq\"'ing
" let g:syntastic_aggregate_errors = 1 " Combine all output (eslint & flow)


"""""""""""""""" Miscellaneous """""""""""""""
set encoding=utf8
set background=dark
filetype plugin on " Auto-detect un-labeled filetypes

syntax enable

" Pretty colors
if (has("termguicolors"))
  set termguicolors
endif
set guifont=Operator\ Mono:h14 " Custom font.

colorscheme onedark

" Italicize comments
" https://alexpearce.me/2014/05/italics-in-iterm2-vim-tmux/
highlight Comment gui=italic

set relativenumber number " Absolute line number on current, relative elsewhere

set noswapfile " Don't create swapfiles
set undofile " Persistent undos across file saves

set cursorline " Highlight line
set cursorcolumn " Highlight column
set scrolloff=10 " Scroll when this far from top/bottom

set tabstop=2 shiftwidth=2 expandtab " tabs are 2 spaces

set modifiable

" Show matching brackets when text indicator is over them
set showmatch

set smartcase " Ignore case when searching
" set clipboard=unnamed " Use system-wide clipboard
set clipboard+=unnamedplus
set mouse=a " Mouse can scroll

match Error '\s\+$' " Highlight trailing spaces as errors

set list
set listchars=tab:>- " Show tabs as special character

autocmd FileType gitcommit :startinsert " Start git commits in edit mode

" Auto-reload vimrc in on change
augroup myvimrc
  " clear all au's that may already exist (in-case this is loaded twice)
  au!
  au BufWritePost init.vim so $MYVIMRC
augroup END

""""""""""""""" Abbreviations """""""""
:iabbrev fro for

""""""""""""""" Shortcuts """""""""""""

" Saving
inoremap qq <esc>:q!<CR>
inoremap jj <esc>:w<CR>
inoremap kk <esc>:wq<CR>

nnoremap <leader>w :w<CR>
nnoremap <leader>q :call SafeClose()<CR>
nnoremap <leader>e :w<CR>:call SafeClose()<CR>
nnoremap <leader>1 :q!<CR>

" Not needed since SafeClose() does similar
" nnoremap <leader>k :bd!<CR> " Close current buffer

" Fix strange yank/paste behavior in term
function! ClipboardYank()
  call system('pbcopy', @@)
endfunction

vnoremap <silent> y y:call ClipboardYank()<cr>
vnoremap <silent> d d:call ClipboardYank()<cr>
" nnoremap <silent> p :call ClipboardPaste()<cr>p

" edit vimrc
nnoremap <leader>vv :vsplit $MYVIMRC<CR>
" nnoremap <leader>f :Find<CR>
" nnoremap <leader>f :FZF<CR>
" nnoremap <leader>F :Files<CR>

" panes

function! Move(direction)
  if a:direction == 'h'
    bprevious
  elseif a:direction == 'l'
    bnext
  endif
endfunction

noremap <C-l> :call Move('l')<CR>
noremap <C-h> :call Move('h')<CR>
nnoremap <leader>j :split<CR>
nnoremap <leader>l :vsplit<CR>
set splitright " open splits to the right

nnoremap <silent> <leader>h :wincmd h<CR>
nnoremap <silent> <leader>l :wincmd l<CR>
nnoremap <leader><leader> :bnext<CR>

" Un-highlight search matches after a second \"Enter\" press
nnoremap <CR> :noh<CR><CR> " Yank to the end of line
nnoremap Y y$
" Move easier to beginning/end of line
nnoremap e $
nnoremap H 0

" duplicate current line or selection
nnoremap <leader>d yyp
nnoremap <leader>D yyP
vmap <leader>d Y'>p
vmap <leader>D Y'>P

" add word under cursor to dictionary
nnoremap aw zg

" turn on spelling for markdown files
autocmd BufRead,BufNewFile *.md setlocal spell complete+=kspell
" highlight bad words in red
" autocmd BufRead,BufNewFile *.md hi SpellBad guibg=#ff2929 guifg=#ffffff" ctermbg=224


""""""""""""""""" Neovim Terminal """""""""""""""""""""""
" Escape from insert mode in shell
tnoremap <Esc> <C-\><C-n>
" Open terminal faster
nnoremap <leader>t :terminal<CR>
autocmd TermOpen * set bufhidden=hide " don't close term when inactive buffer
" On terminal enter, begin insert mode
au BufEnter *
      \ if &buftype == 'terminal' |
      \   :startinsert |
      \ endif " insert mode always when entering terminal

" nnoremap <C-l> :call Move('l')<CR>
" nnoremap <C-h> :call Move('h')<CR>
" tnoremap <silent> <C-h> <C-\><C-n>:call Move('h')<CR>
" tnoremap <silent> <C-l> <C-\><C-n>:call Move('l')<CR>
tnoremap <C-j> <C-\><C-n><C-w>j
tnoremap <C-k> <C-\><C-n><C-w>k

" Disable ex mode
:map Q <Nop>

" Disable auto-comment extending
" http://vim.wikia.com/wiki/Disable_automatic_comment_insertion<Paste>
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Remember cursor position between vim sessions
autocmd BufReadPost *
      \ if line("'\"") > 0 && line ("'\"") <= line("$") |
      \   exe "normal! g'\"" |
      \ endif
" center buffer around cursor when opening files
autocmd BufRead * normal zz

" Auto-add shebang
augroup Shebang
  autocmd BufNewFile *.sh 0put =\"#!/bin/bash\<nl>\"|$
augroup END

function! ESLintFix()
  silent execute "!./node_modules/.bin/eslint --fix %"
  edit! %
endfunction

function! XOFix()
  silent execute "!./node_modules/.bin/xo --fix %"
  edit! %
endfunction

" Prompt for vim exit confirmation before closing
function! NumBuffers()
  return len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))
endfunction

function! DeleteBuffer()
  setl bufhidden=delete
  bnext
  setl bufhidden=hide
endfunction

function! SafeClose()
  let num_windows = winnr('$')
  let num_buffers = NumBuffers()
  " if num_windows == 1 && num_buffers > 1
  if num_buffers > 1
    call DeleteBuffer()
  elseif num_windows == 1
    " if 1 == confirm("Quit Vim?", "&Yes\n&No", 2)
    quit
    " endif
  else
    close
  endif
endfunction

" " Close out NERDTree if it's the last things open
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
"
" " Navigating windows
" nnoremap <silent> <leader>j :wincmd j<CR>
" """""""""""""""""""" Custom commands """"""""""""""""""""
" " Paste in teammate names for code review

" >_ Customizations for the vim editor. Read more at https://github.com/dawsbot/vimrc-builder
