let mapleader = ' '

"""""""""""""""" Plug """"""""""""""""""""""""
call plug#begin('~/Dropbox/dotfiles/link/plugged')

" Load on startup
Plug 'vim-airline/vim-airline'
Plug 'mhartington/oceanic-next'
Plug 'editorconfig/editorconfig-vim'
Plug 'tomtom/tcomment_vim'
Plug 'neomake/neomake'
Plug 'kshenoy/vim-signature' " Display vim marks in left bar
Plug 'airblade/vim-gitgutter' " Displays git diff in left bar

Plug 'jiangmiao/auto-pairs'
" Completion
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

" File searching
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Syntax-specific
Plug 'othree/yajs.vim' , { 'for': 'javascript' } " Syntax for js
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'othree/es.next.syntax.vim', { 'for': 'javascript' } " imports, etc.
Plug 'mxw/vim-jsx', { 'for': 'javascript' }
Plug 'sindresorhus/vim-xo', { 'for': 'javascript' } " Lint with xo

" Plug 'mattn/emmet-vim', { 'for': 'html' } " html tab completions
Plug 'mattn/emmet-vim' " html tab completions
" Re-enable when neovim python runtime is figured out https://github.com/neovim/neovim/issues/1203
Plug 'valloric/MatchTagAlways', {'for': 'html'}
" Re-enable when working on a css project and care to figure out why this is not working
" Plug 'skammer/vim-css-color', { 'for': 'css' } " css color highlighting

" On-demand loading
Plug 'scrooloose/nerdtree'

call plug#end()

" Airline
let g:airline#extensions#tabline#enabled = 1 " Enable topnav of buffers
" let g:airline#extensions#tabline#fnamemod = ':t' " Only filename in top nav
let g:airline_theme='oceanicnext'
let g:airline_powerline_fonts = 1

" Nerdtree
let NERDTreeShowLineNumbers=1
let NERDTreeShowHidden=1
nnoremap <leader>n :NERDTree<CR>
" If no file is specified, open to nerdtree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTreeToggle | endif

" Emmet
" imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")

" vim-jsx
let g:jsx_ext_required = 0 " Allow JSX in normal JS files

" Neomake
let g:neomake_javascript_eslint_maker = {
      \ 'errorformat': '%E%f: line %l\, col %c\, Error - %m,' .
      \ '%W%f: line %l\, col %c\, Warning - %m',
      \ 'exe': "eslint",
      \ 'args': ['-f', 'compact'],
      \ }

let g:neomake_jsx_eslint_maker = {
      \ 'errorformat': '%E%f: line %l\, col %c\, Error - %m,' .
      \ '%W%f: line %l\, col %c\, Warning - %m',
      \ 'exe': "eslint",
      \ 'args': ['-f', 'compact'],
      \ }

let g:neomake_javascript_enabled_makers = ['eslint']
let g:neomake_jsx_enabled_makers = ['eslint']

autocmd! BufWritePost * Neomake


" Deoplete
let g:deoplete#enable_at_startup = 1
" tab completion of deoplete suggestions
imap <tab> <C-n>

" Syntastic
" Trim trailing whitespace
function! TrimTrailingWhitespace(txt)
  return substitute(a:txt, '^\n*\s*\(.\{-}\)\n*\s*$', '\1', '')
endfunction

" let g:syntastic_error_symbol='✘'
" let g:syntastic_warning_symbol='⚠︎'
" let g:syntastic_check_on_open = 1
"
" " Javascript lint
" let g:syntastic_javascript_checkers=['eslint', 'xo']
"
"
" " Source local xo executable
" let b:syntastic_javascript_xo_exec = TrimTrailingWhitespace(system('echo $(npm bin)/xo'))
" let g:syntastic_javascript_eslint_exe = '$(npm bin)/eslint'
" " let b:syntastic_javascript_xo_exec = system('echo $(npm bin)/xo')
"
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_wq = 0 " No need to lint while \"wq\"'ing
" let g:syntastic_aggregate_errors = 1 " Combine all output (eslint & flow)


"""""""""""""""" Miscellaneous """""""""""""""
set encoding=utf8
set background=dark
filetype plugin on " Auto-detect un-labeled filetypes

syntax enable

" Pretty colors
if (has("termguicolors"))
  set termguicolors
endif
set guifont=Operator\ Mono:h14 " Custom font.

colorscheme OceanicNext

" Italicize comments
" https://alexpearce.me/2014/05/italics-in-iterm2-vim-tmux/
highlight Comment gui=italic

set relativenumber number " Absolute line number on current, relative elsewhere

set noswapfile " Don't create swapfiles
set undofile " Persistent undos across file saves

set cursorline " Highlight line
set cursorcolumn " Highlight column
set scrolloff=10 " Scroll when this far from top/bottom

set tabstop=2 shiftwidth=2 expandtab " tabs are 2 spaces

" Show matching brackets when text indicator is over them
set showmatch

set ignorecase " Ignore case when searching
" set clipboard=unnamed " Use system-wide clipboard
set clipboard+=unnamedplus
set mouse=a " Mouse can scroll

match Error '\s\+$' " Highlight trailing spaces as errors

set list
set listchars=tab:>- " Show tabs as special character

autocmd FileType gitcommit :startinsert " Start git commits in edit mode

" Auto-reload vimrc in all active windows on change
augroup myvimrc
  au!
  au BufWritePost .vimrc,_vimrc,vimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

""""""""""""""" Shortcuts """""""""""""

" Saving
imap jj <esc>:w<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>1 :q!<CR>
nnoremap <leader>e :wq<CR>

nnoremap <leader>k :bd<CR> " Close current buffer

" nnoremap <leader>f :Find<CR>
nnoremap <leader>f :FZF<CR>
nnoremap <leader>F :Files<CR>

" Swap between panes
nnoremap <silent> <leader>h :wincmd h<CR>
nnoremap <silent> <leader>l :wincmd l<CR>
nnoremap <leader><leader> :bnext<CR>

" Un-highlight search matches after a second \"Enter\" press
nnoremap <CR> :noh<CR><CR>

" Yank to the end of line
nnoremap Y y$
" Move easier to beginning/end of line
nnoremap L $
nnoremap H 0

" duplicate current line below
noremap <leader>d Y'>p

" add work under cursor to dictionary
nnoremap aw zg

" File autocompletion
inoremap <c-f> <c-x><c-f>

" turn on spelling for markdown files
autocmd BufRead,BufNewFile *.md setlocal spell complete+=kspell
" highlight bad words in red
autocmd BufRead,BufNewFile *.md hi SpellBad guibg=#ff2929 guifg=#ffffff" ctermbg=224


""""""""""""""""" Neovim Terminal """""""""""""""""""""""
tnoremap <Esc> <C-\><C-n> " Escape from insert mode in shell
" Open terminal faster
nnoremap <leader>t :terminal<CR>

tnoremap <A-h> <C-\><C-n><C-w>h
tnoremap <A-j> <C-\><C-n><C-w>j
tnoremap <A-k> <C-\><C-n><C-w>k
tnoremap <A-l> <C-\><C-n><C-w>l
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l

" Disable ex mode and replace with quitting
:map Q <Nop>

" Disable auto-comment extending
" http://vim.wikia.com/wiki/Disable_automatic_comment_insertion<Paste>
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Remember cursor position between vim sessions
autocmd BufReadPost *
      \ if line("'\"") > 0 && line ("'\"") <= line("$") |
      \   exe "normal! g'\"" |
      \ endif
" center buffer around cursor when opening files
autocmd BufRead * normal zz

" ripgrep file search with \":Find\"
" https://medium.com/@crashybang/supercharge-vim-with-fzf-and-ripgrep-d4661fc853d2
" --column: Show column number
" --line-number: Show line number
" --no-heading: Do not show file headings in results
" --fixed-strings: Search term as a literal string
" --ignore-case: Case insensitive search
" --no-ignore: Do not respect .gitignore, etc...
" --hidden: Search hidden files and folders
" --follow: Follow symlinks
" --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
" --color: Search color options
" command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), 1, <bang>0)

" Auto-add shebang
augroup Shebang
  autocmd BufNewFile *.sh 0put =\"#!/bin/bash\<nl>\"|$
augroup END

" Autofix linting
" nnoremap <leader>el :call ESLintFix()<CR>
nnoremap <leader>xo :call XOFix()<CR>

function! ESLintFix()
  silent execute "!./node_modules/.bin/eslint --fix %"
  edit! %
endfunction

function! XOFix()
  silent execute "!./node_modules/.bin/xo --fix %"
  edit! %
endfunction

" """" fix broken crontab temp file """""
" au BufEnter /private/tmp/crontab.* setl backupcopy=yes
"
" """"""""""""""""""" Functions """""""""""""""""""""
" function! TrimWhiteSpace()
"   %s/\s\+$//e
"   :w
"   ''
" endfunction
"
" function! DoubleQuotesToSingle()
"   %s/"/'/g
"   :w
"   ''
" endfunction
"
" " Close out NERDTree if it's the last things open
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
"
" set backspace=indent,eol,start
"
" """"""""""""""""""" Leader overrides """"""""""""""""""""
" nnoremap <silent> <leader>s :call TrimWhiteSpace()<CR>
"
" nmap <leader>p <F2><CR>ki
"
" " Navigating windows
" nnoremap <silent> <leader>j :wincmd j<CR>
"
" """""""""""""""""""" Custom commands """"""""""""""""""""
" " Paste in teammate names for code review
" nnoremap <leader>t a dkearns aleksey<ESC>

